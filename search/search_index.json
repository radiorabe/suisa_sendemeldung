{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"suisa_sendemeldung","text":"<p>ACRCloud client that fetches data on our playout history and formats them in a CSV file format containing the data (like Track, Title and ISRC) requested by SUISA. Also takes care of sending the report to SUISA via email for hands-off operations.</p>"},{"location":"#usage","title":"Usage","text":"<p>We provide the SUISA Sendmeldung script as a container image or as a python package.</p> <p>These usage instructions show how to install the script and how to configure it. There are different ways to run it at a schedule. We recommend using systemd-timers.</p> <p>To output the scripts usage information, check out it's <code>--help</code> output:</p> <pre><code># Using Podman\npodman run --rm -ti ghcr.io/radiorabe/suisasendemeldung:latest suisa_sendemeldung --help\n\n# Using Docker\ndocker run --rm -ti ghcr.io/radiorabe/suisasendemeldung:latest suisa_sendemeldung --help\n</code></pre> <p>While we recommend running the script in it's container, you can also install the script in any python environment using pip.</p> <p>We recommend using a dedicated venv for running the script hould you go down this route:</p> <pre><code>python -mvenv .venv\n. venv/bin/activate\n\npip install suisa_sendemeldung\n\n# Output usage after installation\nsuisa_sendemeldung\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>You can configure this script with a configuration file (default is <code>suisa_sendemeldung.conf</code>), environment variables, or command line arguments.</p> <p>Command line arguments override environment variables which themselves override settings in the configuration file.</p>"},{"location":"#configuration-file","title":"Configuration file","text":"<p>The configuration files will be evaluated in the following order (last takes precedence over first):</p> <ol> <li><code>/etc/suisa_sendemeldung.conf</code></li> <li><code>$HOME/suisa_sendemeldung.conf</code></li> <li><code>./suisa_sendemeldung.conf</code></li> </ol> <p>For details on how to set configuration values, have a look at suisa_sendemeldung.conf.</p>"},{"location":"#environment-variables","title":"Environment variables","text":"<p>Environment variables can also be passed as options. The relevant variables are listed in the Usage part of this document. For example run the script as follows:</p> <pre><code>podman run --rm -ti -e BEARER_TOKEN=abcdefghijklmnopqrstuvwxyzabcdef -e STREAM_ID=a-bcdefgh -e STDOUT=True ghcr.io/radiorabe/suisasendemeldung:latest suisa_sendemeldung\n</code></pre>"},{"location":"#command-line-switches","title":"Command line switches","text":"<p>As documented in Usage, you can also pass in options on the command line as arguments. Simply run the script as follows:</p> <pre><code>podman run --rm -ti ghcr.io/radiorabe/suisasendemeldung:latest suisa_sendemeldung --bearer-token=abcdefghijklmnopqrstuvwxyzabcdef --stream_id=a-bcdefgh --stdout\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Snapshot testing is used to test the help output, you can update the snapshots like so: <pre><code>poetry run pytest -- --snapshot-update\n</code></pre></p>"},{"location":"#release-management","title":"Release Management","text":"<p>At RaBe we run the script on the first and 14th of each month. Matching this we only release new versions of the script in the second half of each month.</p> <p>The CI/CD setup uses semantic commit messages following the conventional commits standard. There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases.</p> <p>The commit message should be structured as follows:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches gets released with a PATCH version bump</li> <li>feat: a commit of the type <code>feat</code> gets released as a MINOR version bump</li> <li>BREAKING CHANGE: a commit that has a footer <code>BREAKING CHANGE:</code> gets released as a MAJOR version bump</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed and don't trigger a release</li> </ol> <p>If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR.</p> <p>Once a commit has landed on the <code>main</code> branch a release will be created and automatically published to pypi using the GitHub Action in .github/workflows/release.yaml which uses twine to publish the package to pypi. The <code>release.yaml</code> action also takes care of pushing a container image to GitHub Packages.</p>"},{"location":"reference/acrclient/","title":"Acrclient","text":"<p>Get started by importing the Client.</p> <pre><code>&gt;&gt;&gt; from acrclient import Client\n</code></pre> <p>Create an instance and pass it a bearer token:</p> <pre><code>&gt;&gt;&gt; client = Client(\"bearer-token\")\n</code></pre> <p>See <code>Client</code> for available methods and options.</p>"},{"location":"reference/suisa_sendemeldung/","title":"Suisa sendemeldung","text":""}]}